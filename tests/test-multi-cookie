#!/bin/sh
#
# Copyright (C) 2013 Red Hat
#
# This file is part of GnuTLS.
#
# GnuTLS is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# GnuTLS is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GnuTLS; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

SERV="${SERV:-../src/ocserv}"
PORT=4449

. `dirname $0`/common.sh

echo "Testing whether cookies are being re-used... "

launch_server -d -f -c test-multi-cookie.config & PID=$!
wait_server $PID

echo "Connecting to obtain cookie... "
eval `echo "test" | openconnect -q localhost:$PORT -u test --authenticate --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3`

if [ -z "$COOKIE" ];then
	fail $PID "Could not obtain cookie"
fi

#echo "Cookie: $COOKIE"

echo "Connecting with cookie... "
echo "test" | openconnect -q localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --script=/bin/true >/dev/null 2>&1 &
CPID=$!

echo "Connecting again with same cookie... "
#( echo "test" | openconnect -q localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --cookieonly >/dev/null 2>&1 ) ||
#	fail $PID "Could not connect to server"
echo "test" | openconnect -q localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --script=/bin/true --verbose >/dev/null 2>&1 &
C2PID=$!

sleep 4

kill $C2PID >/dev/null 2>&1
if [ $? != 0 ];then
	fail $PID "It was not possible to establish session!"
fi

# checking whether server has already terminated $CPID
sleep 1
kill $CPID >/dev/null 2>&1
if [ $? == 0 ];then
	fail $PID "Initial connection was still running!"
fi

kill $PID
wait

exit 0
